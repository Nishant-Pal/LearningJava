Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc. 
Example 
int i = 5000; 
float gpa = 13.65; 
byte mask = 0xaf; 
However, in development, we come across situations where
 we need to use objects instead of primitive data types. In order
 to achieve this, Java provides wrapper classes. 
All the wrapper classes (Integer, Long, Byte, Double, Float, Short)
 are subclasses of the abstract class Number.  
The object of the wrapper class contains or wraps its respective 
primitive data type. Converting primitive data
 types into object is called boxing, and this is taken care by the
 compiler. Therefore, while using a wrapper class
 you just need to pass the value of the primitive data type to the 
constructor of the Wrapper class. 

And the Wrapper object will be converted back to a primitive 
data type, and this process is called unboxing. The Number class is part of the java.lang package. 
Following is an example of boxing and unboxing: 
public class Test{ 
   public static void main(String args[]){ 
      Integer x = 5; // boxes int to an Integer object 
      x =  x + 10;   // unboxes the Integer to a int 
      System.out.println(x);  
   } 
}  


Java XXXValue Method

Description The method converts the value of the Number Object that 
invokes the method to the primitive data type that is returned from the method.
Syntax Here is a separate method for each primitive data type:
byte byteValue()
short shortValue()
int intValue()
long longValue()
float floatValue()
double doubleValue()
Parameters Here is the detail of parameters:
• All these are default methods and accepts no parameter.
Return Value
• This method returns the primitive data type that is given in the signature.
Example
public class Test{
public static void main(String args[]){
Integer x = 5;
// Returns byte primitive data type
System.out.println( x.byteValue() );
Java
87
// Returns double primitive data type
System.out.println(x.doubleValue());
// Returns long primitive data type
System.out.println( x.longValue() );
}
}
This will produce the following result:
5
5.0
5

Java – compareTo() Method

Description The method compares the Number object that invoked the method to the argument. It is possible to compare Byte, Long, Integer, etc.
However, two different types cannot be compared, both the argument and the Number object invoking the method should be of the same type.
Syntax
public int compareTo( NumberSubClass referenceName )
Parameters Here is the detail of parameters:
• referenceName -- This could be a Byte, Double, Integer, Float, Long, or Short.
Return Value • If the Integer is equal to the argument then 0 is returned. • If the Integer is less than the argument then -1 is returned. • If the Integer is greater than the argument then 1 is returned.
Java
88
Example
public class Test{
public static void main(String args[]){
Integer x = 5;
System.out.println(x.compareTo(3));
System.out.println(x.compareTo(5));
System.out.println(x.compareTo(8));
}
}
This will produce the following result:
1
0
-1

Java – equals() Method

Description The method determines whether the Number object that invokes the method is equal to the object that is passed as an argument.
Syntax
public boolean equals(Object o)
Parameters Here is the detail of parameters:
• -- Any object.
Return Value • The method returns True if the argument is not null and is an object of the same type and with the same numeric value. There are some extra requirements for Double and Float objects that are described in the Java API documentation.
Java
89
Example
public class Test{
public static void main(String args[]){
Integer x = 5;
Integer y = 10;
Integer z =5;
Short a = 5;
System.out.println(x.equals(y));
System.out.println(x.equals(z));
System.out.println(x.equals(a));
}
}
This will produce the following result:
false
true
false

Java – valueOf() Method

Description The valueOf method returns the relevant Number Object holding the value of the argument passed. The argument can be a primitive data type, String, etc.
This method is a static method. The method can take two arguments, where one is a String and the other is a radix.
Syntax Following are all the variants of this method:
static Integer valueOf(int i)
static Integer valueOf(String s)
static Integer valueOf(String s, int radix)
Java
90
Parameters Here is the detail of parameters:
• i -- An int for which Integer representation would be returned.
• s -- A String for which Integer representation would be returned.
• radix -- This would be used to decide the value of returned Integer based on the passed String.
Return Value • valueOf(int i): This returns an Integer object holding the value of the specified primitive.
• valueOf(String s): This returns an Integer object holding the value of the specified string representation.
• valueOf(String s, int radix): This returns an Integer object holding the integer value of the specified string representation, parsed with the value of radix.
public class Test{
public static void main(String args[]){

Integer x =Integer.valueOf(9);
Double c = Double.valueOf(5);
Float a = Float.valueOf("80");
Integer b = Integer.valueOf("444",16);
System.out.println(x);
System.out.println(c);
System.out.println(a);
System.out.println(b);
}
}
This will produce the following result:
9
5.0
80.0
1092

Rest ALL ARE Math.methods



Char has wrapper class Character

it has methods
*isdigit,isWhitespace,isLetter
*toUppercase,......


String is immutable

StringBuilder is mutable but unsynchronized(thread unsafe)

StringBuffer is mutable but synchronized but is slower than StringBuilder

Java – String Buffer append() Method 

Description This method updates the value of the object that invoked the method. 
The method takes boolean, char, int, long, Strings, etc. 
Syntax Here is a separate method for each primitive data type: 
public StringBuffer append(boolean b) 
public StringBuffer append(char c)  
public StringBuffer append(char[] str)  
public StringBuffer append(char[] str, int offset, int len)  
public StringBuffer append(double d)  
public StringBuffer append(float f) 
public StringBuffer append(int i)  
public StringBuffer append(long l)  
public StringBuffer append(Object obj)  
public StringBuffer append(StringBuffer sb)  
public StringBuffer append(String str) 

Java – String Buffer reverse() Method

Description This method reverses the value of the StringBuffer object that invoked the method.
Let n be the length of the old character sequence, the one contained in the string buffer just
 prior to the execution of the reverse method. Then, the character at index k in the new 
character sequence is equal to the character at index n-k-1 in the old character sequence.
Syntax Here is the syntax for this method:
public StringBuffer reverse()
Parameters Here is the detail of parameters:
• NA
Return Value
• This method returns StringBuffer object with the reversed sequence.
Java
130
Example
public class Test {
public static void main(String args[]) {
StringBuffer buffer = new StringBuffer("Game Plan");
buffer.reverse();
System.out.println(buffer);
}
}
This will produce the following result:
nalP emaG

Java – String Buffer delete() Method

Description This method removes the characters in a substring of this StringBuffer.
 The substring begins at the specified start and extends to the character at index 
end - 1 or to the end of the StringBuffer if no such character exists.
If start is equal to end, no changes are made.
Syntax Here is the syntax of this method:

public StringBuffer delete(int start, int end)

Parameters Here is the detail of parameters:
• start -- The beginning index, inclusive. • end -- The ending index, exclusive.
Return Value
• This method returns the StringBuffer object.
Java
131
Example
public class Test {
public static void main(String args[]) {
StringBuffer sb = new StringBuffer("abcdefghijk");
sb.delete(3,7);
System.out.println(sb);
}
}
This will produce the following result:
abchijk

Java – String Buffer insert() Method

Description This method removes the characters in a substring of this StringBuffer. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the StringBuffer, if no such character exists.
If start is equal to end, no changes are made.
Syntax Here is a separate method for each primitive data type:
public StringBuffer insert(int offset, boolean b)
public StringBuffer insert(int offset, char c)
public insert(int offset, char[] str)
public StringBuffer insert(int index, char[] str,
int offset, int len)
public StringBuffer insert(int offset, float f)
public StringBuffer insert(int offset, int i)
public StringBuffer insert(int offset, long l)
public StringBuffer insert(int offset, Object obj)
public StringBuffer insert(int offset, String str)
Java
132
Parameters Here is the detail of parameters:
• Parameter depends on what you are trying to insert.
Return Value
• This method returns the modified StringBuffer object.
Example
public class Test {
public static void main(String args[]) {
StringBuffer sb = new StringBuffer("abcdefghijk");
sb.insert(3,"123");
System.out.println(sb);
}
}
This will produce the following result:
abc123defghijk

Java – String Buffer replace() Method

Description This method replaces the characters in a substring of this StringBuffer 
with characters in the specified String.
The substring begins at the specified start and extends to the character at index end 
- 1 or to the end of the StringBuffer, if no such character exists. First the characters
 in the substring are removed and then the specified String is inserted at start.
Syntax Here is the syntax of this method:

public StringBuffer replace(int start, int end, String str)


String class method

Java – String matches() Method 

Description This method tells whether or not this string matches the given regular expression. 
An invocation of this method of the form str.matches(regex) yields exactly the same result as 
the expression Pattern.matches(regex, str). 
Syntax Here is the syntax of this method: 
public boolean matches(String regex) 
Parameters Here is the detail of parameters:  regex -- the regular expression to which this
 string is to be matched.  
Java  
169  
Return Value  This method returns true if, and only if, this string matches the given 
regular expression.


public String replace(char oldChar, char newChar)